
Fragments:

convert an mmdb::Model *model_p to std::vector<std::pair<mmdb::Atom *, std::string> model_typed_atoms
Every atom has an associated CCP4-atom-type.

calculate_daca(reference_residue_p, std::vector<std::pair<mmdb::Atom *, std::string> model_typed_atoms)

Get the fragments (atom sets) of the reference residue.

For each fragment

   get the rtop that rotates this fragment onto the reference fragment (at the origin)

   for every atom in model_typed_atoms, find the distance to the centre of the fragment
      If less than limit
         find the box for this atom:
         apply the rtop to this atom - that gives us 3D coordinates near the origin
         convert that coordinate to a box indices.
         Add one to that box for that fragment of that residue type

  

---------------------------

Robbie suggest the use of CCP4 Energy types

Use Symmetry-related molecules when generating the table

Roobie whatif packing score: fine and coarse: to monitor refinement progress.

Ligand validation : break all lignads into rigid groups and look at distribution of side chain groups.

Check the chirality in SMARTS - can it be use t to type ligand fragments?

Internal symmetry: say for a PHE side chain - how does that work?

partition on beta-strand also (as well as helices)

What happens about water? check the code and the paper? Just leave it out?

Tuesday next week? yes.



-----
Wed  1 Jul 19:38:53 BST 2020

   make something like figure 5 tryptophans.

   NT3s for the top hits.

   Mg around the backbond of nucleic acid - in particular positions.

   Asn side chains find the peak for C1 of sugars? - another time.

   Bug in ARG fragments - probably everywhere.


----
Wed  8 Jul 10:41:50 BST 2020

sub.sh multi-daca.sh
[wait]
./coot-daca consolidate splits/table* consolidated [take about a minute, 29 table directories each of ~10m lines]


---
Wed  8 Jul 19:46:04 BST 2020


4 -rw------- 1 paule paule  36 Jul  8 13:48 daca-analyse-final.sh
4 -rw------- 1 paule paule  38 Jul  8 13:47 daca-analyse-cycle-0.sh

use plot-2.r to plot the distributions

----
Thu  9 Jul 23:17:30 BST 2020


grep residue_number daca-analyse-A-chain-0-cycle.log > cycle-0.tab
grep residue_number daca-analyse-A-chain-final.log > final.tab


a = read.table('final.tab')
b = read.table('cycle-0.tab')
plot(a$V2, a$V4, xlab="Residue Number", ylab="DACA Score Sum", main="DACA Score Sum for 1eoi, A chain")
points(b$V2, b$V4, pch=19)

nct = c('Final', 'Cycle 0')
legend(150, 2000000, nct, pch=c(1,19))



----
Thu  9 Jul 23:22:56 BST 2020

   need to normalize:

   so sum of values for each atom type for each box_key needs to be 1.0 (or 1 million)?

